
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PushupRecord` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model PushupRecord
 * 
 */
export type PushupRecordModel = runtime.Types.Result.DefaultSelection<Prisma.$PushupRecordPayload>

export type AggregatePushupRecord = {
  _count: PushupRecordCountAggregateOutputType | null
  _avg: PushupRecordAvgAggregateOutputType | null
  _sum: PushupRecordSumAggregateOutputType | null
  _min: PushupRecordMinAggregateOutputType | null
  _max: PushupRecordMaxAggregateOutputType | null
}

export type PushupRecordAvgAggregateOutputType = {
  id: number | null
  pushupCount: number | null
  userId: number | null
}

export type PushupRecordSumAggregateOutputType = {
  id: number | null
  pushupCount: number | null
  userId: number | null
}

export type PushupRecordMinAggregateOutputType = {
  id: number | null
  pushupCount: number | null
  date: Date | null
  userId: number | null
}

export type PushupRecordMaxAggregateOutputType = {
  id: number | null
  pushupCount: number | null
  date: Date | null
  userId: number | null
}

export type PushupRecordCountAggregateOutputType = {
  id: number
  pushupCount: number
  date: number
  userId: number
  _all: number
}


export type PushupRecordAvgAggregateInputType = {
  id?: true
  pushupCount?: true
  userId?: true
}

export type PushupRecordSumAggregateInputType = {
  id?: true
  pushupCount?: true
  userId?: true
}

export type PushupRecordMinAggregateInputType = {
  id?: true
  pushupCount?: true
  date?: true
  userId?: true
}

export type PushupRecordMaxAggregateInputType = {
  id?: true
  pushupCount?: true
  date?: true
  userId?: true
}

export type PushupRecordCountAggregateInputType = {
  id?: true
  pushupCount?: true
  date?: true
  userId?: true
  _all?: true
}

export type PushupRecordAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PushupRecord to aggregate.
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PushupRecords to fetch.
   */
  orderBy?: Prisma.PushupRecordOrderByWithRelationInput | Prisma.PushupRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PushupRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PushupRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PushupRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PushupRecords
  **/
  _count?: true | PushupRecordCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PushupRecordAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PushupRecordSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PushupRecordMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PushupRecordMaxAggregateInputType
}

export type GetPushupRecordAggregateType<T extends PushupRecordAggregateArgs> = {
      [P in keyof T & keyof AggregatePushupRecord]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePushupRecord[P]>
    : Prisma.GetScalarType<T[P], AggregatePushupRecord[P]>
}




export type PushupRecordGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PushupRecordWhereInput
  orderBy?: Prisma.PushupRecordOrderByWithAggregationInput | Prisma.PushupRecordOrderByWithAggregationInput[]
  by: Prisma.PushupRecordScalarFieldEnum[] | Prisma.PushupRecordScalarFieldEnum
  having?: Prisma.PushupRecordScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PushupRecordCountAggregateInputType | true
  _avg?: PushupRecordAvgAggregateInputType
  _sum?: PushupRecordSumAggregateInputType
  _min?: PushupRecordMinAggregateInputType
  _max?: PushupRecordMaxAggregateInputType
}

export type PushupRecordGroupByOutputType = {
  id: number
  pushupCount: number
  date: Date
  userId: number
  _count: PushupRecordCountAggregateOutputType | null
  _avg: PushupRecordAvgAggregateOutputType | null
  _sum: PushupRecordSumAggregateOutputType | null
  _min: PushupRecordMinAggregateOutputType | null
  _max: PushupRecordMaxAggregateOutputType | null
}

type GetPushupRecordGroupByPayload<T extends PushupRecordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PushupRecordGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PushupRecordGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PushupRecordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PushupRecordGroupByOutputType[P]>
      }
    >
  >



export type PushupRecordWhereInput = {
  AND?: Prisma.PushupRecordWhereInput | Prisma.PushupRecordWhereInput[]
  OR?: Prisma.PushupRecordWhereInput[]
  NOT?: Prisma.PushupRecordWhereInput | Prisma.PushupRecordWhereInput[]
  id?: Prisma.IntFilter<"PushupRecord"> | number
  pushupCount?: Prisma.IntFilter<"PushupRecord"> | number
  date?: Prisma.DateTimeFilter<"PushupRecord"> | Date | string
  userId?: Prisma.IntFilter<"PushupRecord"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PushupRecordOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type PushupRecordWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PushupRecordWhereInput | Prisma.PushupRecordWhereInput[]
  OR?: Prisma.PushupRecordWhereInput[]
  NOT?: Prisma.PushupRecordWhereInput | Prisma.PushupRecordWhereInput[]
  pushupCount?: Prisma.IntFilter<"PushupRecord"> | number
  date?: Prisma.DateTimeFilter<"PushupRecord"> | Date | string
  userId?: Prisma.IntFilter<"PushupRecord"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type PushupRecordOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.PushupRecordCountOrderByAggregateInput
  _avg?: Prisma.PushupRecordAvgOrderByAggregateInput
  _max?: Prisma.PushupRecordMaxOrderByAggregateInput
  _min?: Prisma.PushupRecordMinOrderByAggregateInput
  _sum?: Prisma.PushupRecordSumOrderByAggregateInput
}

export type PushupRecordScalarWhereWithAggregatesInput = {
  AND?: Prisma.PushupRecordScalarWhereWithAggregatesInput | Prisma.PushupRecordScalarWhereWithAggregatesInput[]
  OR?: Prisma.PushupRecordScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PushupRecordScalarWhereWithAggregatesInput | Prisma.PushupRecordScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PushupRecord"> | number
  pushupCount?: Prisma.IntWithAggregatesFilter<"PushupRecord"> | number
  date?: Prisma.DateTimeWithAggregatesFilter<"PushupRecord"> | Date | string
  userId?: Prisma.IntWithAggregatesFilter<"PushupRecord"> | number
}

export type PushupRecordCreateInput = {
  pushupCount: number
  date?: Date | string
  user: Prisma.UserCreateNestedOneWithoutRecordsInput
}

export type PushupRecordUncheckedCreateInput = {
  id?: number
  pushupCount: number
  date?: Date | string
  userId: number
}

export type PushupRecordUpdateInput = {
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutRecordsNestedInput
}

export type PushupRecordUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PushupRecordCreateManyInput = {
  id?: number
  pushupCount: number
  date?: Date | string
  userId: number
}

export type PushupRecordUpdateManyMutationInput = {
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PushupRecordUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PushupRecordListRelationFilter = {
  every?: Prisma.PushupRecordWhereInput
  some?: Prisma.PushupRecordWhereInput
  none?: Prisma.PushupRecordWhereInput
}

export type PushupRecordOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PushupRecordCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PushupRecordAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PushupRecordMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PushupRecordMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PushupRecordSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pushupCount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PushupRecordCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput> | Prisma.PushupRecordCreateWithoutUserInput[] | Prisma.PushupRecordUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PushupRecordCreateOrConnectWithoutUserInput | Prisma.PushupRecordCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PushupRecordCreateManyUserInputEnvelope
  connect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
}

export type PushupRecordUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput> | Prisma.PushupRecordCreateWithoutUserInput[] | Prisma.PushupRecordUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PushupRecordCreateOrConnectWithoutUserInput | Prisma.PushupRecordCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PushupRecordCreateManyUserInputEnvelope
  connect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
}

export type PushupRecordUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput> | Prisma.PushupRecordCreateWithoutUserInput[] | Prisma.PushupRecordUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PushupRecordCreateOrConnectWithoutUserInput | Prisma.PushupRecordCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PushupRecordUpsertWithWhereUniqueWithoutUserInput | Prisma.PushupRecordUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PushupRecordCreateManyUserInputEnvelope
  set?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  disconnect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  delete?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  connect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  update?: Prisma.PushupRecordUpdateWithWhereUniqueWithoutUserInput | Prisma.PushupRecordUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PushupRecordUpdateManyWithWhereWithoutUserInput | Prisma.PushupRecordUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PushupRecordScalarWhereInput | Prisma.PushupRecordScalarWhereInput[]
}

export type PushupRecordUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput> | Prisma.PushupRecordCreateWithoutUserInput[] | Prisma.PushupRecordUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PushupRecordCreateOrConnectWithoutUserInput | Prisma.PushupRecordCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PushupRecordUpsertWithWhereUniqueWithoutUserInput | Prisma.PushupRecordUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PushupRecordCreateManyUserInputEnvelope
  set?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  disconnect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  delete?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  connect?: Prisma.PushupRecordWhereUniqueInput | Prisma.PushupRecordWhereUniqueInput[]
  update?: Prisma.PushupRecordUpdateWithWhereUniqueWithoutUserInput | Prisma.PushupRecordUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PushupRecordUpdateManyWithWhereWithoutUserInput | Prisma.PushupRecordUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PushupRecordScalarWhereInput | Prisma.PushupRecordScalarWhereInput[]
}

export type PushupRecordCreateWithoutUserInput = {
  pushupCount: number
  date?: Date | string
}

export type PushupRecordUncheckedCreateWithoutUserInput = {
  id?: number
  pushupCount: number
  date?: Date | string
}

export type PushupRecordCreateOrConnectWithoutUserInput = {
  where: Prisma.PushupRecordWhereUniqueInput
  create: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput>
}

export type PushupRecordCreateManyUserInputEnvelope = {
  data: Prisma.PushupRecordCreateManyUserInput | Prisma.PushupRecordCreateManyUserInput[]
}

export type PushupRecordUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PushupRecordWhereUniqueInput
  update: Prisma.XOR<Prisma.PushupRecordUpdateWithoutUserInput, Prisma.PushupRecordUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PushupRecordCreateWithoutUserInput, Prisma.PushupRecordUncheckedCreateWithoutUserInput>
}

export type PushupRecordUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PushupRecordWhereUniqueInput
  data: Prisma.XOR<Prisma.PushupRecordUpdateWithoutUserInput, Prisma.PushupRecordUncheckedUpdateWithoutUserInput>
}

export type PushupRecordUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PushupRecordScalarWhereInput
  data: Prisma.XOR<Prisma.PushupRecordUpdateManyMutationInput, Prisma.PushupRecordUncheckedUpdateManyWithoutUserInput>
}

export type PushupRecordScalarWhereInput = {
  AND?: Prisma.PushupRecordScalarWhereInput | Prisma.PushupRecordScalarWhereInput[]
  OR?: Prisma.PushupRecordScalarWhereInput[]
  NOT?: Prisma.PushupRecordScalarWhereInput | Prisma.PushupRecordScalarWhereInput[]
  id?: Prisma.IntFilter<"PushupRecord"> | number
  pushupCount?: Prisma.IntFilter<"PushupRecord"> | number
  date?: Prisma.DateTimeFilter<"PushupRecord"> | Date | string
  userId?: Prisma.IntFilter<"PushupRecord"> | number
}

export type PushupRecordCreateManyUserInput = {
  id?: number
  pushupCount: number
  date?: Date | string
}

export type PushupRecordUpdateWithoutUserInput = {
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PushupRecordUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PushupRecordUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pushupCount?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PushupRecordSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pushupCount?: boolean
  date?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pushupRecord"]>

export type PushupRecordSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pushupCount?: boolean
  date?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pushupRecord"]>

export type PushupRecordSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pushupCount?: boolean
  date?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pushupRecord"]>

export type PushupRecordSelectScalar = {
  id?: boolean
  pushupCount?: boolean
  date?: boolean
  userId?: boolean
}

export type PushupRecordOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pushupCount" | "date" | "userId", ExtArgs["result"]["pushupRecord"]>
export type PushupRecordInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PushupRecordIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PushupRecordIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PushupRecordPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PushupRecord"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    pushupCount: number
    date: Date
    userId: number
  }, ExtArgs["result"]["pushupRecord"]>
  composites: {}
}

export type PushupRecordGetPayload<S extends boolean | null | undefined | PushupRecordDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload, S>

export type PushupRecordCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PushupRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PushupRecordCountAggregateInputType | true
  }

export interface PushupRecordDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PushupRecord'], meta: { name: 'PushupRecord' } }
  /**
   * Find zero or one PushupRecord that matches the filter.
   * @param {PushupRecordFindUniqueArgs} args - Arguments to find a PushupRecord
   * @example
   * // Get one PushupRecord
   * const pushupRecord = await prisma.pushupRecord.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PushupRecordFindUniqueArgs>(args: Prisma.SelectSubset<T, PushupRecordFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PushupRecord that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PushupRecordFindUniqueOrThrowArgs} args - Arguments to find a PushupRecord
   * @example
   * // Get one PushupRecord
   * const pushupRecord = await prisma.pushupRecord.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PushupRecordFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PushupRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PushupRecord that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordFindFirstArgs} args - Arguments to find a PushupRecord
   * @example
   * // Get one PushupRecord
   * const pushupRecord = await prisma.pushupRecord.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PushupRecordFindFirstArgs>(args?: Prisma.SelectSubset<T, PushupRecordFindFirstArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PushupRecord that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordFindFirstOrThrowArgs} args - Arguments to find a PushupRecord
   * @example
   * // Get one PushupRecord
   * const pushupRecord = await prisma.pushupRecord.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PushupRecordFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PushupRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PushupRecords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PushupRecords
   * const pushupRecords = await prisma.pushupRecord.findMany()
   * 
   * // Get first 10 PushupRecords
   * const pushupRecords = await prisma.pushupRecord.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pushupRecordWithIdOnly = await prisma.pushupRecord.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PushupRecordFindManyArgs>(args?: Prisma.SelectSubset<T, PushupRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PushupRecord.
   * @param {PushupRecordCreateArgs} args - Arguments to create a PushupRecord.
   * @example
   * // Create one PushupRecord
   * const PushupRecord = await prisma.pushupRecord.create({
   *   data: {
   *     // ... data to create a PushupRecord
   *   }
   * })
   * 
   */
  create<T extends PushupRecordCreateArgs>(args: Prisma.SelectSubset<T, PushupRecordCreateArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PushupRecords.
   * @param {PushupRecordCreateManyArgs} args - Arguments to create many PushupRecords.
   * @example
   * // Create many PushupRecords
   * const pushupRecord = await prisma.pushupRecord.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PushupRecordCreateManyArgs>(args?: Prisma.SelectSubset<T, PushupRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PushupRecords and returns the data saved in the database.
   * @param {PushupRecordCreateManyAndReturnArgs} args - Arguments to create many PushupRecords.
   * @example
   * // Create many PushupRecords
   * const pushupRecord = await prisma.pushupRecord.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PushupRecords and only return the `id`
   * const pushupRecordWithIdOnly = await prisma.pushupRecord.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PushupRecordCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PushupRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PushupRecord.
   * @param {PushupRecordDeleteArgs} args - Arguments to delete one PushupRecord.
   * @example
   * // Delete one PushupRecord
   * const PushupRecord = await prisma.pushupRecord.delete({
   *   where: {
   *     // ... filter to delete one PushupRecord
   *   }
   * })
   * 
   */
  delete<T extends PushupRecordDeleteArgs>(args: Prisma.SelectSubset<T, PushupRecordDeleteArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PushupRecord.
   * @param {PushupRecordUpdateArgs} args - Arguments to update one PushupRecord.
   * @example
   * // Update one PushupRecord
   * const pushupRecord = await prisma.pushupRecord.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PushupRecordUpdateArgs>(args: Prisma.SelectSubset<T, PushupRecordUpdateArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PushupRecords.
   * @param {PushupRecordDeleteManyArgs} args - Arguments to filter PushupRecords to delete.
   * @example
   * // Delete a few PushupRecords
   * const { count } = await prisma.pushupRecord.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PushupRecordDeleteManyArgs>(args?: Prisma.SelectSubset<T, PushupRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PushupRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PushupRecords
   * const pushupRecord = await prisma.pushupRecord.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PushupRecordUpdateManyArgs>(args: Prisma.SelectSubset<T, PushupRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PushupRecords and returns the data updated in the database.
   * @param {PushupRecordUpdateManyAndReturnArgs} args - Arguments to update many PushupRecords.
   * @example
   * // Update many PushupRecords
   * const pushupRecord = await prisma.pushupRecord.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PushupRecords and only return the `id`
   * const pushupRecordWithIdOnly = await prisma.pushupRecord.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PushupRecordUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PushupRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PushupRecord.
   * @param {PushupRecordUpsertArgs} args - Arguments to update or create a PushupRecord.
   * @example
   * // Update or create a PushupRecord
   * const pushupRecord = await prisma.pushupRecord.upsert({
   *   create: {
   *     // ... data to create a PushupRecord
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PushupRecord we want to update
   *   }
   * })
   */
  upsert<T extends PushupRecordUpsertArgs>(args: Prisma.SelectSubset<T, PushupRecordUpsertArgs<ExtArgs>>): Prisma.Prisma__PushupRecordClient<runtime.Types.Result.GetResult<Prisma.$PushupRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PushupRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordCountArgs} args - Arguments to filter PushupRecords to count.
   * @example
   * // Count the number of PushupRecords
   * const count = await prisma.pushupRecord.count({
   *   where: {
   *     // ... the filter for the PushupRecords we want to count
   *   }
   * })
  **/
  count<T extends PushupRecordCountArgs>(
    args?: Prisma.Subset<T, PushupRecordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PushupRecordCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PushupRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PushupRecordAggregateArgs>(args: Prisma.Subset<T, PushupRecordAggregateArgs>): Prisma.PrismaPromise<GetPushupRecordAggregateType<T>>

  /**
   * Group by PushupRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PushupRecordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PushupRecordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PushupRecordGroupByArgs['orderBy'] }
      : { orderBy?: PushupRecordGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PushupRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushupRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PushupRecord model
 */
readonly fields: PushupRecordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PushupRecord.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PushupRecordClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PushupRecord model
 */
export interface PushupRecordFieldRefs {
  readonly id: Prisma.FieldRef<"PushupRecord", 'Int'>
  readonly pushupCount: Prisma.FieldRef<"PushupRecord", 'Int'>
  readonly date: Prisma.FieldRef<"PushupRecord", 'DateTime'>
  readonly userId: Prisma.FieldRef<"PushupRecord", 'Int'>
}
    

// Custom InputTypes
/**
 * PushupRecord findUnique
 */
export type PushupRecordFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter, which PushupRecord to fetch.
   */
  where: Prisma.PushupRecordWhereUniqueInput
}

/**
 * PushupRecord findUniqueOrThrow
 */
export type PushupRecordFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter, which PushupRecord to fetch.
   */
  where: Prisma.PushupRecordWhereUniqueInput
}

/**
 * PushupRecord findFirst
 */
export type PushupRecordFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter, which PushupRecord to fetch.
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PushupRecords to fetch.
   */
  orderBy?: Prisma.PushupRecordOrderByWithRelationInput | Prisma.PushupRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PushupRecords.
   */
  cursor?: Prisma.PushupRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PushupRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PushupRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PushupRecords.
   */
  distinct?: Prisma.PushupRecordScalarFieldEnum | Prisma.PushupRecordScalarFieldEnum[]
}

/**
 * PushupRecord findFirstOrThrow
 */
export type PushupRecordFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter, which PushupRecord to fetch.
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PushupRecords to fetch.
   */
  orderBy?: Prisma.PushupRecordOrderByWithRelationInput | Prisma.PushupRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PushupRecords.
   */
  cursor?: Prisma.PushupRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PushupRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PushupRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PushupRecords.
   */
  distinct?: Prisma.PushupRecordScalarFieldEnum | Prisma.PushupRecordScalarFieldEnum[]
}

/**
 * PushupRecord findMany
 */
export type PushupRecordFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter, which PushupRecords to fetch.
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PushupRecords to fetch.
   */
  orderBy?: Prisma.PushupRecordOrderByWithRelationInput | Prisma.PushupRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PushupRecords.
   */
  cursor?: Prisma.PushupRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PushupRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PushupRecords.
   */
  skip?: number
  distinct?: Prisma.PushupRecordScalarFieldEnum | Prisma.PushupRecordScalarFieldEnum[]
}

/**
 * PushupRecord create
 */
export type PushupRecordCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * The data needed to create a PushupRecord.
   */
  data: Prisma.XOR<Prisma.PushupRecordCreateInput, Prisma.PushupRecordUncheckedCreateInput>
}

/**
 * PushupRecord createMany
 */
export type PushupRecordCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PushupRecords.
   */
  data: Prisma.PushupRecordCreateManyInput | Prisma.PushupRecordCreateManyInput[]
}

/**
 * PushupRecord createManyAndReturn
 */
export type PushupRecordCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * The data used to create many PushupRecords.
   */
  data: Prisma.PushupRecordCreateManyInput | Prisma.PushupRecordCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PushupRecord update
 */
export type PushupRecordUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * The data needed to update a PushupRecord.
   */
  data: Prisma.XOR<Prisma.PushupRecordUpdateInput, Prisma.PushupRecordUncheckedUpdateInput>
  /**
   * Choose, which PushupRecord to update.
   */
  where: Prisma.PushupRecordWhereUniqueInput
}

/**
 * PushupRecord updateMany
 */
export type PushupRecordUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PushupRecords.
   */
  data: Prisma.XOR<Prisma.PushupRecordUpdateManyMutationInput, Prisma.PushupRecordUncheckedUpdateManyInput>
  /**
   * Filter which PushupRecords to update
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * Limit how many PushupRecords to update.
   */
  limit?: number
}

/**
 * PushupRecord updateManyAndReturn
 */
export type PushupRecordUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * The data used to update PushupRecords.
   */
  data: Prisma.XOR<Prisma.PushupRecordUpdateManyMutationInput, Prisma.PushupRecordUncheckedUpdateManyInput>
  /**
   * Filter which PushupRecords to update
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * Limit how many PushupRecords to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PushupRecord upsert
 */
export type PushupRecordUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * The filter to search for the PushupRecord to update in case it exists.
   */
  where: Prisma.PushupRecordWhereUniqueInput
  /**
   * In case the PushupRecord found by the `where` argument doesn't exist, create a new PushupRecord with this data.
   */
  create: Prisma.XOR<Prisma.PushupRecordCreateInput, Prisma.PushupRecordUncheckedCreateInput>
  /**
   * In case the PushupRecord was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PushupRecordUpdateInput, Prisma.PushupRecordUncheckedUpdateInput>
}

/**
 * PushupRecord delete
 */
export type PushupRecordDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
  /**
   * Filter which PushupRecord to delete.
   */
  where: Prisma.PushupRecordWhereUniqueInput
}

/**
 * PushupRecord deleteMany
 */
export type PushupRecordDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PushupRecords to delete
   */
  where?: Prisma.PushupRecordWhereInput
  /**
   * Limit how many PushupRecords to delete.
   */
  limit?: number
}

/**
 * PushupRecord without action
 */
export type PushupRecordDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PushupRecord
   */
  select?: Prisma.PushupRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PushupRecord
   */
  omit?: Prisma.PushupRecordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PushupRecordInclude<ExtArgs> | null
}
